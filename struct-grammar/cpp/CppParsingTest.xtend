/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xtext.example.mydsl.cpp.Model

@RunWith(XtextRunner)
@InjectWith(CppInjectorProvider)
class CppParsingTest {
	@Inject
	ParseHelper<Model> parseHelper

	@Test
	def void structBasico() {
		val result = parseHelper.parse('''
			struct teste {};
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void structComVariaveis() {
		val result = parseHelper.parse('''
			struct Person {
			    char name[50];
			    int age;
			    float salary;
			};
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void declaraObjetos() {
		val result = parseHelper.parse('''
			struct product {
				int weight;
				double price;
			} apple, banana, melon;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void variavelTipoStruct() {
		val result = parseHelper.parse('''
			struct movies_t {
				string title;
				int year;
			} films [3];
						
			struct friends_t {
			  	char name[25];
			  	string email;
			  	movies_t favorite_movie;
			} charlie, maria;
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

	@Test
	def void structHeranca() {
		val result = parseHelper.parse('''
			struct A { };
			struct B : A { };
			struct C : B { };
		''')
		Assert.assertNotNull(result)
		Assert.assertTrue(result.eResource.errors.isEmpty)
	}

}
